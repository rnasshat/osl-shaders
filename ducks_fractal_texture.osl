#include "complex.h"

/*
    algorithm source:
    https://algorithmic-worlds.net/blog/blog.php?Post=20110227
*/

shader node_fractal_ducks(
    point Pos = P,
    float seed_real = 0.0,
    float seed_imag = 0.0,
    int iterations = 100,
    int julia = 0 [[ string widget = "boolean" ]],
    int trap_type = 0 [[ string widget = "boolean" ]],
    point orbit_trap = point(0, 0, 0),
    output float fac = 0.0,
    output float real = 0.0,
    output float imag = 0.0,
    output vector trap_dist = vector(0x0FFFFFFF, 0x0FFFFFFF, 0))
{
    complex z;
    complex c;
    if(julia)
    {
        z = complex(Pos[0], Pos[1]);
        c = complex(seed_real, seed_imag);
    } else {
        z = complex(0, 0);
        c = complex(Pos[0], Pos[1]);
    }
    
    float mag = 0;
    
    for(int i=0; i<iterations; i++)
    {
        //main function
        z = log(complex(z.real, abs(z.imag)) + c);
        mag += cabs(z);
        
        //orbit traps
        if(trap_type == 0) //0 = axis-aligned lines
        {
            trap_dist.x = min(trap_dist.x, abs(orbit_trap.x - z.real));
            trap_dist.y = min(trap_dist.y, abs(orbit_trap.y - z.imag));
        } else { //1 = point with angle
            trap_dist.x = min(trap_dist.x, distance({z.real, z.imag, 0}, {orbit_trap.x, orbit_trap.y, 0}));
            trap_dist.y = min(trap_dist.y, atan2(z.imag - orbit_trap.y, z.real - orbit_trap.x));
        }
    }
    
    fac = mag/(float)iterations;

    real = z.real;
    imag = z.imag;
}

